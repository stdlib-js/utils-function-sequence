{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Function sequence.\n*\n* @param {...Function} f - functions to evaluate in sequential order\n* @throws {Error} must provide more than one argument\n* @throws {TypeError} must provide functions\n* @returns {Function} pipeline function\n*\n* @example\n* function a( x ) {\n*     return 2 * x;\n* }\n*\n* function b( x ) {\n*     return x + 3;\n* }\n*\n* function c( x ) {\n*     return x / 5;\n* }\n*\n* var f = funseq( a, b, c );\n*\n* var z = f( 6 );\n* // returns 3\n*/\nfunction funseq() {\n\tvar nFuncs;\n\tvar f;\n\tvar i;\n\tnFuncs = arguments.length;\n\tif ( nFuncs < 2 ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide multiple functions to execute sequentially.' );\n\t}\n\tf = new Array( nFuncs );\n\tfor ( i = 0; i < nFuncs; i++ ) {\n\t\tf[ i ] = arguments[ i ];\n\t\tif ( !isFunction( f[ i ] ) ) {\n\t\t\tthrow new TypeError( format( '0juBQ', f[ i ] ) );\n\t\t}\n\t}\n\treturn pipeline;\n\n\t/**\n\t* Pipeline function.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @returns {*} result\n\t*/\n\tfunction pipeline() {\n\t\tvar args;\n\t\tvar i;\n\t\targs = new Array( arguments.length );\n\t\tfor ( i = 0; i < args.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\t\targs = f[ 0 ].apply( null, args );\n\t\tfor ( i = 1; i < nFuncs; i++ ) {\n\t\t\targs = f[ i ]( args );\n\t\t}\n\t\treturn args;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default funseq;\n"],"names":["funseq","nFuncs","f","i","arguments","length","Error","Array","isFunction","TypeError","format","pipeline","args","apply"],"mappings":";;uLAsDA,SAASA,IACR,IAAIC,EACAC,EACAC,EAEJ,IADAF,EAASG,UAAUC,QACL,EACb,MAAM,IAAIC,MAAO,oFAGlB,IADAJ,EAAI,IAAIK,MAAON,GACTE,EAAI,EAAGA,EAAIF,EAAQE,IAExB,GADAD,EAAGC,GAAMC,UAAWD,IACdK,EAAYN,EAAGC,IACpB,MAAM,IAAIM,UAAWC,EAAQ,QAASR,EAAGC,KAG3C,OAAOQ,EASP,SAASA,IACR,IAAIC,EACAT,EAEJ,IADAS,EAAO,IAAIL,MAAOH,UAAUC,QACtBF,EAAI,EAAGA,EAAIS,EAAKP,OAAQF,IAC7BS,EAAMT,GAAMC,UAAWD,GAGxB,IADAS,EAAOV,EAAG,GAAIW,MAAO,KAAMD,GACrBT,EAAI,EAAGA,EAAIF,EAAQE,IACxBS,EAAOV,EAAGC,GAAKS,GAEhB,OAAOA,CACP,CACF"}